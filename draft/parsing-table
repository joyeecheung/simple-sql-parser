# RULES
# for each production A -> alpha
# for a in first(A), put A -> alpha in [A, a]
# if epsilon in first(A), for b in follow(A), put A -> alpha in [A, b]
# if epsilon in first(A) and $ in follow(A), add A -> alpha to [A, $]


ssql\_stmt -> create\_stmt | insert\_stmt | delete\_stmt | query\_stmt
{CREATE, INSERT, DELETE, SELECT}, {$}
-----------
CREATE: create\_stmt ->  CREATE TABLE id L\_PAREN decl\_list R\_PAREN SEMICOLON
INSERT: insert\_stmt -> INSERT INTO id L\_PAREN column\_list R\_PAREN VALUES L\_PAREN value\_list R\_PAREN SEMICOLON
DELETE: delete\_stmt -> DELETE FROM id where\_clause SEMICOLON
SELECT: query\_stmt -> SELECT select\_list FROM id where\_clause SEMICOLON


-----------------------
create\_stmt
-> CREATE TABLE id L\_PAREN decl\_list R\_PAREN SEMICOLON
------------
{CREATE}, {$}
------------
CREATE:
create\_stmt ->  CREATE TABLE id L\_PAREN decl\_list R\_PAREN SEMICOLON


------------------------
decl\_list
-> decl \_decl\_list
------------
{id, PRIMARY}, {R\_PAREN}
------------
id:
decl\_list -> decl \_decl\_list
PRIMARY:
decl\_list -> decl \_decl\_list

------------------------
\_decl\_list
-> COMMA decl \_decl\_list
-> epsilon
------------
{COMMA, epsilon}, {R\_PAREN}
------------
COMMA:
\_decl\_list -> COMMA decl \_decl\_list
R\_PAREN:
\_decl\_list -> epsilon

------------------------
decl
-> id INT default\_spec
-> PRIMARY KEY L\_PAREN column\_list R\_PAREN
------------
{id, PRIMARY}, {COMMA, R\_PAREN}
------------
id:
decl -> id INT default\_spec
PRIMARY:
PRIMARY KEY L\_PAREN column\_list R\_PAREN

------------------------
default\_spec
-> DEFAULT ASSIGN expr[true]
-> epsilon
------------
{DEFAULT, epsilon}, {COMMA, R\_PAREN}
------------
DEFAULT:
default\_spec -> DEFAULT ASSIGN expr[true]
COMMA:
default\_spec -> epsilon
R\_PAREN:
default\_spec -> epsilon

-----------------------
column\_list
-> id \_column\_list
------------
{id}, {FROM, R\_PAREN}
------------
id:
column\_list ->  id \_column\_list

-----------------------
\_column\_list
-> COMMA id \_column\_list
-> epsilon
------------
{COMMA, epsilon}, {FROM, R\_PAREN}
------------
COMMA:
\_column\_list -> COMMA id \_column\_list
FROM:
\_column\_list -> epsilon
R\_PAREN:
\_column\_list -> epsilon


-----------------------
insert\_stmt
------------
{INSERT}, {$}
------------
INSERT:
insert\_stmt -> INSERT INTO id L\_PAREN column\_list R\_PAREN VALUES L\_PAREN value\_list R\_PAREN SEMICOLON


-----------------------
value\_list
-> expr[true] \_value\_list
------------
{PLUS, MINUS, num, L\_PAREN}, {R\_PAREN}
------------
PLUS:
value\_list -> expr[true] \_value\_list
MINUS:
value\_list -> expr[true] \_value\_list
num:
value\_list -> expr[true] \_value\_list
L\_PAREN:
value\_list -> expr[true] \_value\_list


-----------------------
\_value\_list
-> COMMA expr[true] \_value\_list
-> epsilon
------------
{COMMA, epsilon}, {R\_PAREN}
------------
COMMA:
\_value\_list -> COMMA expr[true] \_value\_list
R\_PAREN:
\_value\_list -> epsilon


-----------------------
delete\_stmt
------------
{DELETE}, {$}
------------
DELETE:
delete\_stmt -> DELETE FROM id where\_clause SEMICOLON


-----------------------
where\_clause
-> WHERE disjunct
-> epsilon
------------
{WHERE, epsilon}, {SEMICOLON}
------------
WHERE:
where\_clause -> WHERE disjunct
SEMICOLON:
where\_clause -> epsilon


-----------------------
disjunct
-> conjunct \_disjunct
------------
{L\_PAREN, NOT, PLUS, MINUS, num, id}, {SEMICOLON, R\_PAREN}
------------
L\_PAREN:
disjunct -> conjunct \_disjunct
NOT:
disjunct -> conjunct \_disjunct
PLUS:
disjunct -> conjunct \_disjunct
MINUS:
disjunct -> conjunct \_disjunct
num:
disjunct -> conjunct \_disjunct
id:
disjunct -> conjunct \_disjunct


-----------------------
\_disjunct
-> OR conjunct \_disjunct
-> epsilon
------------
{OR, epsilon}, {SEMICOLON, R\_PAREN}
------------
OR:
\_disjunct -> OR conjunct \_disjunct
SEMICOLON:
\_disjunct-> epsilon
R\_PAREN:
\_disjunct-> epsilon


-----------------------
conjunct
-> bool \_conjunct
------------
{L\_PAREN, NOT, PLUS, MINUS, num, id}, {OR, SEMICOLON, R\_PAREN}
------------
L\_PAREN:
conjunct -> bool \_conjunct
NOT:
conjunct -> bool \_conjunct
PLUS:
conjunct -> bool \_conjunct
MINUS:
conjunct -> bool \_conjunct
num:
conjunct -> bool \_conjunct
id:
conjunct -> bool \_conjunct


-----------------------
\_conjunct
-> AND bool \_conjunct
-> epsilon
------------
{AND, epsilon}, {OR, SEMICOLON, R\_PAREN}
------------
AND:
conjunct\_list -> bool \_conjunct
OR:
\_conjunct -> epsilon
SEMICOLON:
\_conjunct -> epsilon
R\_PAREN:
\_conjunct -> epsilon


-----------------------
bool
-> L\_PAREN disjunct R\_PAREN
-> NOT bool
-> comp
------------
{L\_PAREN, NOT, PLUS, MINUS, num, id}, {AND, OR, SEMICOLON, R\_PAREN}
------------
L\_PAREN:
    bool -> L\_PAREN disjunct R\_PAREN
NOT:
    bool -> NOT bool
PLUS:
    bool -> comp
MINUS:
    bool -> comp
num:
    bool -> comp
id:
    bool -> comp


-----------------------
comp
-> expr[false] rop expr[false]
------------
{PLUS, MINUS, num, id}, {AND, OR, SEMICOLON, R\_PAREN}
------------
PLUS:
    comp -> expr[false] rop expr[false]
MINUS:
    comp -> expr[false] rop expr[false]
num:
    comp -> expr[false] rop expr[false]
id:
    comp -> expr[false] rop expr[false]


-----------------------
expr[]
-> term[] \_expr[]
------------
{PLUS, MINUS, num} true{L\_PAREN} false{id}
true{COMMA, R\_PAREN} false{NEQ, EQ, LT, GT, LEQ, GEQ, AND, OR, SEMICOLON, R\_PAREN}
------------
PLUS:
    expr[] -> term[] \_expr[]
MINUS:
    expr[] -> term[] \_expr[]
num:
    expr[] -> term[] \_expr[]
L\_PAREN && simple == true:
    expr[true] -> term[true] \_expr[true]
id && simple == false:
    expr[false] -> term[false] \_expr[false]


-----------------------
\_expr[]
-> PLUS term[] \_expr[]
-> MINUS term[] \_expr[]
-> epsilon
------------
{PLUS, MINUS, epsilon},
true{COMMA, R\_PAREN}
false{NEQ, EQ, LT, GT, LEQ, GEQ, AND, OR, SEMICOLON, R\_PAREN}
------------
PLUS:
    \_expr[] -> PLUS term[] \_expr[]
MINUS:
    \_expr[] -> MINUS term[] \_expr[]
true:
    COMMA || R\_PAREN:
        \_expr[] -> epsilon
false:
    NEQ || EQ || LT || GT || LEQ || GEQ || AND || OR || SEMICOLON || R\_PAREN
        \_expr[] -> epsilon


-----------------------
term[]
-> unary[] \_term[]
------------
{PLUS, MINUS, num} true{L\_PAREN} false{id}
true{PLUS, MINUS, COMMA, R\_PAREN}
false{PLUS, MINUS, NEQ, EQ, LT, GT, LEQ, GEQ, AND, OR, SEMICOLON, R\_PAREN}
------------
PLUS:
    term[] -> unary[] \_term[]
MINUS:
    term[] -> unary[] \_term[]
num:
    term[] -> unary[] \_term[]
L\_PAREN && simple == true:
    term[true] -> unary[true] \_term[true]
id && simple == false:
    term[false] -> unary[false] \_term[false]


-----------------------
\_term[]
-> MUL unary[] \_term[]
-> DIV unary[] \_term[]
-> epsilon
------------
{MUL, DIV, epsilon},
true{PLUS, MINUS, COMMA, R\_PAREN}
false{PLUS, MINUS, NEQ, EQ, LT, GT, LEQ, GEQ, AND, OR, SEMICOLON, R\_PAREN}
------------
MUL:
    \_term[] -> MUL unary[] \_term[]
DIV:
    \_term[] -> DIV unary[] \_term[]
PLUS || MINUS:
    \_term[] -> epsilon
true:
    COMMA || R\_PAREN:
        \_term[] -> epsilon
false:
    NEQ || EQ || LT || GT || LEQ || GEQ || AND || OR || SEMICOLON || R\_PAREN
        \_term[] -> epsilon



-----------------------
unary[]
-> PLUS unary[]
-> MINUS unary[]
-> num
[true] -> L\_PAREN expr[true] R\_PAREN
[false] -> id
------------
{PLUS, MINUS, num, L\_PAREN}
true {MUL, DIV, PLUS, MINUS, COMMA, R\_PAREN}
false {MUL, DIV, PLUS, MINUS, NEQ, EQ, LT, GT, LEQ, GEQ, AND, OR, SEMICOLON, R\_PAREN}
------------
PLUS:
    unary[] -> PLUS unary[]
MINUS:
    unary[] -> MINUS unary[]
num:
    unary[] -> num
L\_PAREN && simple == true:
    unary[true] -> L\_PAREN expr[true] R\_PAREN
id && simple == false:
    unary[false] -> id


-----------------------
rop
------------
{NEQ, EQ, LT, GT, LEQ, GEQ}, {PLUS, MINUS, num, id}
------------
NEQ:
rop -> NEQ
EQ:
rop -> EQ
LT:
rop -> LT
GT:
rop -> GT
LEQ:
rop -> LEQ
GEQ:
rop -> GEQ

-----------------------
query\_stmt
------------
{SELECT}, {$}
------------
SELECT:
query\_stmt -> SELECT select\_list FROM id where\_clause SEMICOLON

-----------------------
select\_list
------------
{MUL, id}, {FROM, $}
------------
MUL:
select\_list -> MUL
id:
select\_list -> column\_list
